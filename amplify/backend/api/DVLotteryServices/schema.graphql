type Service @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String
  price: Float
  description: String
  cases: [CaseService] @connection(keyName: "byService", fields: ["id"])
}

type Relationship @model @auth(rules: [{allow: private}]) @key(name: "byCustomer", fields: ["customerID"]) {
  id: ID!
  type: String
  dependent_id: String
  customerID: ID
}

type Payment @model @auth(rules: [{allow: private}]) @key(name: "byCustomer", fields: ["customerID"]) {
  id: ID!
  amount: Float
  date: AWSDateTime
  customerID: ID
  Case: Case @connection
}

type Education @model @auth(rules: [{allow: private}]) @key(name: "byCustomer", fields: ["customerID"]) {
  id: ID!
  degree: String
  degree_file: String
  institution: String
  date_start: AWSDate
  date_end: AWSDate
  customerID: ID
}

type Employment @model @key(name: "byCustomer", fields: ["customerID"]) @auth(rules: [{allow: private}]) {
  id: ID!
  title: String
  employer: String
  date_start: AWSDate
  date_end: AWSDate
  customerID: ID
  current: Boolean
}

type Contact @model @auth(rules: [{allow: private}]) @key(name: "byCustomer", fields: ["customerID"]) {
  id: ID!
  email: AWSEmail
  phone_num: AWSPhone
  website: String
  customerID: ID
}

type Case @model @auth(rules: [{allow: private}]) @key(name: "byCustomer", fields: ["customerID"]) {
  id: ID!
  type: String
  status: String
  priority_date: AWSDate
  customerID: ID
  CaseServices: [CaseService] @connection(keyName: "byCase", fields: ["id"])
}

type Billing @model @auth(rules: [{allow: private}]) @key(name: "byCustomer", fields: ["customerID"]) {
  id: ID!
  billing_balance: Float
  due_date: AWSDate
  customerID: ID
}

type Address @model @auth(rules: [{allow: private}]) @key(name: "byCustomer", fields: ["customerID"]) {
  id: ID!
  street_1: String
  street_2: String
  commune: String
  city: String
  province: String
  postal_code: String
  country: String
  customerID: ID
}

type Customer @model @auth(rules: [{allow: private}]) {
  id: ID!
  firstname_kh: String
  lastname_kh: String
  firstname: String
  lastname: String
  date_of_birth: AWSDate
  gender: String
  driver_license_num: String
  driver_license_file: String
  national_identification_num: String
  national_identification_file: String
  passport_num: String
  passport_file: String
  passport_issue_date: AWSDate
  passport_expiration_date: AWSDate
  marital_status: String
  marriage_certificate_num: String
  marriage_certificate_file: String
  number_of_dependent: Int
  Relationships: [Relationship] @connection(keyName: "byCustomer", fields: ["id"])
  Payments: [Payment] @connection(keyName: "byCustomer", fields: ["id"])
  Educations: [Education] @connection(keyName: "byCustomer", fields: ["id"])
  Employments: [Employment] @connection(keyName: "byCustomer", fields: ["id"])
  Contact: [Contact] @connection(keyName: "byCustomer", fields: ["id"])
  Cases: [Case] @connection(keyName: "byCustomer", fields: ["id"])
  Billings: [Billing] @connection(keyName: "byCustomer", fields: ["id"])
  Addresses: [Address] @connection(keyName: "byCustomer", fields: ["id"])
}

type CaseService @model(queries: null) @key(name: "byCase", fields: ["caseID", "serviceID"]) @key(name: "byService", fields: ["serviceID", "caseID"]) @auth(rules: [{allow: private}, {allow: private}]) {
  id: ID!
  caseID: ID!
  serviceID: ID!
  case: Case! @connection(fields: ["caseID"])
  service: Service! @connection(fields: ["serviceID"])
}
 